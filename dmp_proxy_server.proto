syntax = "proto3";
package opensource.tab.dmp_proxy_server;
// Note: go_package here specifies the address of the protocol repository on git, which should not be the same as the git repository address of the service above.
option go_package="github.com/abetterchoice/protoc_dmp_proxy_server";

// Defining the service interface
service APIServer {
  rpc GetDMPTagResult(GetDMPTagResultReq) returns (GetDMPTagResultResp); // Get dmp tag hit results
  rpc BatchGetDMPTagResult(BatchGetDMPTagResultReq) returns (BatchGetDMPTagResultResp); // Batch obtain dmp tag hit results
  rpc BatchGetTagValue(BatchGetTagValueReq) returns (BatchGetTagValueResp);
}
                                                  
// Request parameters related to the dmp tag determination system
message GetDMPTagResultReq {
  string project_id = 1; // project ID
  string unit_id = 2; // Unique identifier [can be user, session, etc.]
  int64 unit_type = 3; // The type of unitID, reserved field
  string sdk_version = 4; // SDK type and version, such as GO_v1.5.6
  DMPPlatform dmp_platform_code = 5; // Dependent upstream dmp system
  repeated string tag_list = 6; // Related dmp tags that need to be determined
}

// Request dmp tag determination system results
message GetDMPTagResultResp {
  RetCode retCode = 1; // Return Code
  string message = 2; // specific information
  string unit_id = 3; // Unique identifier [can be user, session, etc.]
  int64 unit_type = 4; // The type of unitID, reserved field
  DMPPlatform dmp_platform_code = 10; // Dependent upstream dmp system
  map<string, StatusCode> dmp_result = 11; // Judgment result set, key is the unique identifier of the dmp tag, value is the judgment result
}

message BatchGetTagValueReq {
  string project_id = 1; // project ID
  string unit_id = 2; // Unique identifier [can be user, session, etc.]
  int64 unit_type = 3; // The type of unitID, reserved field
  string sdk_version = 4; // SDK type and version, such as GO_v1.5.6
  DMPPlatform dmp_platform_code = 5; // Dependent upstream dmp system
  repeated string tag_list = 6; // Related dmp tags that need to be determined
}

message BatchGetTagValueResp {
  RetCode retCode = 1; // Return Code
  string message = 2; // specific information
  string unit_id = 3; // Unique identifier [can be user, session, etc.]
  int64 unit_type = 4; // The type of unitID, reserved field
  DMPPlatform dmp_platform_code = 10; // Dependent upstream dmp system
  map<string, string> tag_result = 11;
}

// Request parameters related to the dmp tag determination system
message BatchGetDMPTagResultReq {
  repeated GetDMPTagResultReq req_list = 1; // Request Body
}

// Request dmp tag determination system results
message BatchGetDMPTagResultResp {
  repeated GetDMPTagResultResp resp_list = 1; // Response Body
}

// Upstream dependent dmp system
enum DMPPlatform {
  DMP_PLATFORM_UNKNOWN = 0;
  DMP_PLATFORM_TAB = 100; // tab self-built dmp, reserved
  DMP_PLATFORM_WESEE = 101; // Image center dmp system, formerly micro-view dmp system
  DMP_PLATFORM_BEACON = 102; // beacon dmp system
  DMP_PLATFORM_OAS = 103; // oas dmp system
  DMP_PLATFORM_KUNPENG = 104; // Kunpeng dmp system
  DMP_PLATFORM_MAP = 105; // Map dmp system
}

// return code
enum RetCode {
  RET_CODE_UNKNOWN = 0; // unknown
  RET_CODE_SUCCESS = 1000; // success
  RET_CODE_PERMISSION_ERR = 1001; // No permission
  RET_CODE_LIMIT_ERR = 1002; // Current Limit Return
  RET_CODE_INTERNAL_SERVER_ERR = 1004; // Internal system error, see message for details
  RET_CODE_INVALID_PARAM_ERR = 1005; // Parameter error
}

// unit dmp Tag status code
enum StatusCode {
  STATUS_CODE_UNKNOWN = 0; // unknow
  STATUS_CODE_HIT = 1; // hit
  STATUS_CODE_MISS = 2; // miss
}
