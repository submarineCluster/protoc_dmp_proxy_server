// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0
// source: dmp_proxy_server.proto

package protoc_dmp_proxy_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIServerClientV2 is the client API for APIServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServerClientV2 interface {
	GetDMPTagResult(ctx context.Context, in *GetDMPTagResultReq, opts ...grpc.CallOption) (*GetDMPTagResultResp, error)
	BatchGetDMPTagResult(ctx context.Context, in *BatchGetDMPTagResultReq, opts ...grpc.CallOption) (*BatchGetDMPTagResultResp, error)
	BatchGetTagValue(ctx context.Context, in *BatchGetTagValueReq, opts ...grpc.CallOption) (*BatchGetTagValueResp, error)
}

type aPIServerClientV2 struct {
	cc grpc.ClientConnInterface
}

func NewAPIServerClientV2(cc grpc.ClientConnInterface) APIServerClientV2 {
	return &aPIServerClientV2{cc}
}

func (c *aPIServerClientV2) GetDMPTagResult(ctx context.Context, in *GetDMPTagResultReq, opts ...grpc.CallOption) (*GetDMPTagResultResp, error) {
	out := new(GetDMPTagResultResp)
	err := c.cc.Invoke(ctx, "/opensource.tab.dmp_proxy_server.APIServer/GetDMPTagResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServerClientV2) BatchGetDMPTagResult(ctx context.Context, in *BatchGetDMPTagResultReq, opts ...grpc.CallOption) (*BatchGetDMPTagResultResp, error) {
	out := new(BatchGetDMPTagResultResp)
	err := c.cc.Invoke(ctx, "/opensource.tab.dmp_proxy_server.APIServer/BatchGetDMPTagResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServerClientV2) BatchGetTagValue(ctx context.Context, in *BatchGetTagValueReq, opts ...grpc.CallOption) (*BatchGetTagValueResp, error) {
	out := new(BatchGetTagValueResp)
	err := c.cc.Invoke(ctx, "/opensource.tab.dmp_proxy_server.APIServer/BatchGetTagValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServerServerV2 is the server API for APIServer service.
// All implementations should embed UnimplementedAPIServerServerV2
// for forward compatibility
type APIServerServerV2 interface {
	GetDMPTagResult(context.Context, *GetDMPTagResultReq, *GetDMPTagResultResp) error
	BatchGetDMPTagResult(context.Context, *BatchGetDMPTagResultReq, *BatchGetDMPTagResultResp) error
	BatchGetTagValue(context.Context, *BatchGetTagValueReq, *BatchGetTagValueResp) error
}

// UnimplementedAPIServerServerV2 should be embedded to have forward compatible implementations.
type UnimplementedAPIServerServerV2 struct {
}

func (UnimplementedAPIServerServerV2) GetDMPTagResult(context.Context, *GetDMPTagResultReq, *GetDMPTagResultResp) error {
	return status.Errorf(codes.Unimplemented, "method GetDMPTagResult not implemented")
}
func (UnimplementedAPIServerServerV2) BatchGetDMPTagResult(context.Context, *BatchGetDMPTagResultReq, *BatchGetDMPTagResultResp) error {
	return status.Errorf(codes.Unimplemented, "method BatchGetDMPTagResult not implemented")
}
func (UnimplementedAPIServerServerV2) BatchGetTagValue(context.Context, *BatchGetTagValueReq, *BatchGetTagValueResp) error {
	return status.Errorf(codes.Unimplemented, "method BatchGetTagValue not implemented")
}

// UnsafeAPIServerServerV2 may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServerServerV2 will
// result in compilation errors.
type UnsafeAPIServerServerV2 interface {
	mustEmbedUnimplementedAPIServerServerV2()
}

func RegisterAPIServerServerV2(s grpc.ServiceRegistrar, srv APIServerServerV2) {
	s.RegisterService(&APIServer_ServiceDescV2, srv)
}

func _APIServer_GetDMPTagResult_HandlerV2(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDMPTagResultReq)
	out := new(GetDMPTagResultResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		err := srv.(APIServerServerV2).GetDMPTagResult(ctx, in, out)
		return out, err
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensource.tab.dmp_proxy_server.APIServer/GetDMPTagResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		rsp := new(GetDMPTagResultResp)
		err := srv.(APIServerServerV2).GetDMPTagResult(ctx, req.(*GetDMPTagResultReq), rsp)
		return rsp, err
	}
	return interceptor(ctx, in, info, handler)
}

func _APIServer_BatchGetDMPTagResult_HandlerV2(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetDMPTagResultReq)
	out := new(BatchGetDMPTagResultResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		err := srv.(APIServerServerV2).BatchGetDMPTagResult(ctx, in, out)
		return out, err
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensource.tab.dmp_proxy_server.APIServer/BatchGetDMPTagResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		rsp := new(BatchGetDMPTagResultResp)
		err := srv.(APIServerServerV2).BatchGetDMPTagResult(ctx, req.(*BatchGetDMPTagResultReq), rsp)
		return rsp, err
	}
	return interceptor(ctx, in, info, handler)
}

func _APIServer_BatchGetTagValue_HandlerV2(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetTagValueReq)
	out := new(BatchGetTagValueResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		err := srv.(APIServerServerV2).BatchGetTagValue(ctx, in, out)
		return out, err
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensource.tab.dmp_proxy_server.APIServer/BatchGetTagValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		rsp := new(BatchGetTagValueResp)
		err := srv.(APIServerServerV2).BatchGetTagValue(ctx, req.(*BatchGetTagValueReq), rsp)
		return rsp, err
	}
	return interceptor(ctx, in, info, handler)
}

// APIServer_ServiceDescV2 is the grpc.ServiceDesc for APIServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIServer_ServiceDescV2 = grpc.ServiceDesc{
	ServiceName: "opensource.tab.dmp_proxy_server.APIServer",
	HandlerType: (*APIServerServerV2)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDMPTagResult",
			Handler:    _APIServer_GetDMPTagResult_HandlerV2,
		},
		{
			MethodName: "BatchGetDMPTagResult",
			Handler:    _APIServer_BatchGetDMPTagResult_HandlerV2,
		},
		{
			MethodName: "BatchGetTagValue",
			Handler:    _APIServer_BatchGetTagValue_HandlerV2,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dmp_proxy_server.proto",
}
