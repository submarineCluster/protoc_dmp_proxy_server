// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: dmp_proxy_server.proto

package protoc_dmp_proxy_server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Upstream dependent dmp system
type DMPPlatform int32

const (
	DMPPlatform_DMP_PLATFORM_UNKNOWN DMPPlatform = 0
	DMPPlatform_DMP_PLATFORM_TAB     DMPPlatform = 100 // tab self-built dmp, reserved
	DMPPlatform_DMP_PLATFORM_WESEE   DMPPlatform = 101 // Image center dmp system, formerly micro-view dmp system
	DMPPlatform_DMP_PLATFORM_BEACON  DMPPlatform = 102 // beacon dmp system
	DMPPlatform_DMP_PLATFORM_OAS     DMPPlatform = 103 // oas dmp system
	DMPPlatform_DMP_PLATFORM_KUNPENG DMPPlatform = 104 // Kunpeng dmp system
	DMPPlatform_DMP_PLATFORM_MAP     DMPPlatform = 105 // Map dmp system
)

// Enum value maps for DMPPlatform.
var (
	DMPPlatform_name = map[int32]string{
		0:   "DMP_PLATFORM_UNKNOWN",
		100: "DMP_PLATFORM_TAB",
		101: "DMP_PLATFORM_WESEE",
		102: "DMP_PLATFORM_BEACON",
		103: "DMP_PLATFORM_OAS",
		104: "DMP_PLATFORM_KUNPENG",
		105: "DMP_PLATFORM_MAP",
	}
	DMPPlatform_value = map[string]int32{
		"DMP_PLATFORM_UNKNOWN": 0,
		"DMP_PLATFORM_TAB":     100,
		"DMP_PLATFORM_WESEE":   101,
		"DMP_PLATFORM_BEACON":  102,
		"DMP_PLATFORM_OAS":     103,
		"DMP_PLATFORM_KUNPENG": 104,
		"DMP_PLATFORM_MAP":     105,
	}
)

func (x DMPPlatform) Enum() *DMPPlatform {
	p := new(DMPPlatform)
	*p = x
	return p
}

func (x DMPPlatform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DMPPlatform) Descriptor() protoreflect.EnumDescriptor {
	return file_dmp_proxy_server_proto_enumTypes[0].Descriptor()
}

func (DMPPlatform) Type() protoreflect.EnumType {
	return &file_dmp_proxy_server_proto_enumTypes[0]
}

func (x DMPPlatform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DMPPlatform.Descriptor instead.
func (DMPPlatform) EnumDescriptor() ([]byte, []int) {
	return file_dmp_proxy_server_proto_rawDescGZIP(), []int{0}
}

// return code
type RetCode int32

const (
	RetCode_RET_CODE_UNKNOWN             RetCode = 0    // unknown
	RetCode_RET_CODE_SUCCESS             RetCode = 1000 // success
	RetCode_RET_CODE_PERMISSION_ERR      RetCode = 1001 // No permission
	RetCode_RET_CODE_LIMIT_ERR           RetCode = 1002 // Current Limit Return
	RetCode_RET_CODE_INTERNAL_SERVER_ERR RetCode = 1004 // Internal system error, see message for details
	RetCode_RET_CODE_INVALID_PARAM_ERR   RetCode = 1005 // Parameter error
)

// Enum value maps for RetCode.
var (
	RetCode_name = map[int32]string{
		0:    "RET_CODE_UNKNOWN",
		1000: "RET_CODE_SUCCESS",
		1001: "RET_CODE_PERMISSION_ERR",
		1002: "RET_CODE_LIMIT_ERR",
		1004: "RET_CODE_INTERNAL_SERVER_ERR",
		1005: "RET_CODE_INVALID_PARAM_ERR",
	}
	RetCode_value = map[string]int32{
		"RET_CODE_UNKNOWN":             0,
		"RET_CODE_SUCCESS":             1000,
		"RET_CODE_PERMISSION_ERR":      1001,
		"RET_CODE_LIMIT_ERR":           1002,
		"RET_CODE_INTERNAL_SERVER_ERR": 1004,
		"RET_CODE_INVALID_PARAM_ERR":   1005,
	}
)

func (x RetCode) Enum() *RetCode {
	p := new(RetCode)
	*p = x
	return p
}

func (x RetCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetCode) Descriptor() protoreflect.EnumDescriptor {
	return file_dmp_proxy_server_proto_enumTypes[1].Descriptor()
}

func (RetCode) Type() protoreflect.EnumType {
	return &file_dmp_proxy_server_proto_enumTypes[1]
}

func (x RetCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RetCode.Descriptor instead.
func (RetCode) EnumDescriptor() ([]byte, []int) {
	return file_dmp_proxy_server_proto_rawDescGZIP(), []int{1}
}

// unit dmp Tag status code
type StatusCode int32

const (
	StatusCode_STATUS_CODE_UNKNOWN StatusCode = 0 // unknow
	StatusCode_STATUS_CODE_HIT     StatusCode = 1 // hit
	StatusCode_STATUS_CODE_MISS    StatusCode = 2 // miss
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "STATUS_CODE_UNKNOWN",
		1: "STATUS_CODE_HIT",
		2: "STATUS_CODE_MISS",
	}
	StatusCode_value = map[string]int32{
		"STATUS_CODE_UNKNOWN": 0,
		"STATUS_CODE_HIT":     1,
		"STATUS_CODE_MISS":    2,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_dmp_proxy_server_proto_enumTypes[2].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_dmp_proxy_server_proto_enumTypes[2]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_dmp_proxy_server_proto_rawDescGZIP(), []int{2}
}

// Request parameters related to the dmp tag determination system
type GetDMPTagResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       string      `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`                                                                       // project ID
	UnitId          string      `protobuf:"bytes,2,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`                                                                                // Unique identifier [can be user, session, etc.]
	UnitType        int64       `protobuf:"varint,3,opt,name=unit_type,json=unitType,proto3" json:"unit_type,omitempty"`                                                                         // The type of unitID, reserved field
	SdkVersion      string      `protobuf:"bytes,4,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`                                                                    // SDK type and version, such as GO_v1.5.6
	DmpPlatformCode DMPPlatform `protobuf:"varint,5,opt,name=dmp_platform_code,json=dmpPlatformCode,proto3,enum=opensource.tab.dmp_proxy_server.DMPPlatform" json:"dmp_platform_code,omitempty"` // Dependent upstream dmp system
	TagList         []string    `protobuf:"bytes,6,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`                                                                             // Related dmp tags that need to be determined
}

func (x *GetDMPTagResultReq) Reset() {
	*x = GetDMPTagResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dmp_proxy_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDMPTagResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDMPTagResultReq) ProtoMessage() {}

func (x *GetDMPTagResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_dmp_proxy_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDMPTagResultReq.ProtoReflect.Descriptor instead.
func (*GetDMPTagResultReq) Descriptor() ([]byte, []int) {
	return file_dmp_proxy_server_proto_rawDescGZIP(), []int{0}
}

func (x *GetDMPTagResultReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetDMPTagResultReq) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *GetDMPTagResultReq) GetUnitType() int64 {
	if x != nil {
		return x.UnitType
	}
	return 0
}

func (x *GetDMPTagResultReq) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *GetDMPTagResultReq) GetDmpPlatformCode() DMPPlatform {
	if x != nil {
		return x.DmpPlatformCode
	}
	return DMPPlatform_DMP_PLATFORM_UNKNOWN
}

func (x *GetDMPTagResultReq) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

// Request dmp tag determination system results
type GetDMPTagResultResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode         RetCode               `protobuf:"varint,1,opt,name=retCode,proto3,enum=opensource.tab.dmp_proxy_server.RetCode" json:"retCode,omitempty"`                                                                                                                  // Return Code
	Message         string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                                                                                                                                // specific information
	UnitId          string                `protobuf:"bytes,3,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`                                                                                                                                                    // Unique identifier [can be user, session, etc.]
	UnitType        int64                 `protobuf:"varint,4,opt,name=unit_type,json=unitType,proto3" json:"unit_type,omitempty"`                                                                                                                                             // The type of unitID, reserved field
	DmpPlatformCode DMPPlatform           `protobuf:"varint,10,opt,name=dmp_platform_code,json=dmpPlatformCode,proto3,enum=opensource.tab.dmp_proxy_server.DMPPlatform" json:"dmp_platform_code,omitempty"`                                                                    // Dependent upstream dmp system
	DmpResult       map[string]StatusCode `protobuf:"bytes,11,rep,name=dmp_result,json=dmpResult,proto3" json:"dmp_result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=opensource.tab.dmp_proxy_server.StatusCode"` // Judgment result set, key is the unique identifier of the dmp tag, value is the judgment result
}

func (x *GetDMPTagResultResp) Reset() {
	*x = GetDMPTagResultResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dmp_proxy_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDMPTagResultResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDMPTagResultResp) ProtoMessage() {}

func (x *GetDMPTagResultResp) ProtoReflect() protoreflect.Message {
	mi := &file_dmp_proxy_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDMPTagResultResp.ProtoReflect.Descriptor instead.
func (*GetDMPTagResultResp) Descriptor() ([]byte, []int) {
	return file_dmp_proxy_server_proto_rawDescGZIP(), []int{1}
}

func (x *GetDMPTagResultResp) GetRetCode() RetCode {
	if x != nil {
		return x.RetCode
	}
	return RetCode_RET_CODE_UNKNOWN
}

func (x *GetDMPTagResultResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDMPTagResultResp) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *GetDMPTagResultResp) GetUnitType() int64 {
	if x != nil {
		return x.UnitType
	}
	return 0
}

func (x *GetDMPTagResultResp) GetDmpPlatformCode() DMPPlatform {
	if x != nil {
		return x.DmpPlatformCode
	}
	return DMPPlatform_DMP_PLATFORM_UNKNOWN
}

func (x *GetDMPTagResultResp) GetDmpResult() map[string]StatusCode {
	if x != nil {
		return x.DmpResult
	}
	return nil
}

type BatchGetTagValueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       string      `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`                                                                       // project ID
	UnitId          string      `protobuf:"bytes,2,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`                                                                                // Unique identifier [can be user, session, etc.]
	UnitType        int64       `protobuf:"varint,3,opt,name=unit_type,json=unitType,proto3" json:"unit_type,omitempty"`                                                                         // The type of unitID, reserved field
	SdkVersion      string      `protobuf:"bytes,4,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`                                                                    // SDK type and version, such as GO_v1.5.6
	DmpPlatformCode DMPPlatform `protobuf:"varint,5,opt,name=dmp_platform_code,json=dmpPlatformCode,proto3,enum=opensource.tab.dmp_proxy_server.DMPPlatform" json:"dmp_platform_code,omitempty"` // Dependent upstream dmp system
	TagList         []string    `protobuf:"bytes,6,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`                                                                             // Related dmp tags that need to be determined
}

func (x *BatchGetTagValueReq) Reset() {
	*x = BatchGetTagValueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dmp_proxy_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetTagValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTagValueReq) ProtoMessage() {}

func (x *BatchGetTagValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_dmp_proxy_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTagValueReq.ProtoReflect.Descriptor instead.
func (*BatchGetTagValueReq) Descriptor() ([]byte, []int) {
	return file_dmp_proxy_server_proto_rawDescGZIP(), []int{2}
}

func (x *BatchGetTagValueReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BatchGetTagValueReq) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *BatchGetTagValueReq) GetUnitType() int64 {
	if x != nil {
		return x.UnitType
	}
	return 0
}

func (x *BatchGetTagValueReq) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *BatchGetTagValueReq) GetDmpPlatformCode() DMPPlatform {
	if x != nil {
		return x.DmpPlatformCode
	}
	return DMPPlatform_DMP_PLATFORM_UNKNOWN
}

func (x *BatchGetTagValueReq) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

type BatchGetTagValueResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode         RetCode           `protobuf:"varint,1,opt,name=retCode,proto3,enum=opensource.tab.dmp_proxy_server.RetCode" json:"retCode,omitempty"`                                               // Return Code
	Message         string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                                                             // specific information
	UnitId          string            `protobuf:"bytes,3,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`                                                                                 // Unique identifier [can be user, session, etc.]
	UnitType        int64             `protobuf:"varint,4,opt,name=unit_type,json=unitType,proto3" json:"unit_type,omitempty"`                                                                          // The type of unitID, reserved field
	DmpPlatformCode DMPPlatform       `protobuf:"varint,10,opt,name=dmp_platform_code,json=dmpPlatformCode,proto3,enum=opensource.tab.dmp_proxy_server.DMPPlatform" json:"dmp_platform_code,omitempty"` // Dependent upstream dmp system
	TagResult       map[string]string `protobuf:"bytes,11,rep,name=tag_result,json=tagResult,proto3" json:"tag_result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchGetTagValueResp) Reset() {
	*x = BatchGetTagValueResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dmp_proxy_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetTagValueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTagValueResp) ProtoMessage() {}

func (x *BatchGetTagValueResp) ProtoReflect() protoreflect.Message {
	mi := &file_dmp_proxy_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTagValueResp.ProtoReflect.Descriptor instead.
func (*BatchGetTagValueResp) Descriptor() ([]byte, []int) {
	return file_dmp_proxy_server_proto_rawDescGZIP(), []int{3}
}

func (x *BatchGetTagValueResp) GetRetCode() RetCode {
	if x != nil {
		return x.RetCode
	}
	return RetCode_RET_CODE_UNKNOWN
}

func (x *BatchGetTagValueResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchGetTagValueResp) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *BatchGetTagValueResp) GetUnitType() int64 {
	if x != nil {
		return x.UnitType
	}
	return 0
}

func (x *BatchGetTagValueResp) GetDmpPlatformCode() DMPPlatform {
	if x != nil {
		return x.DmpPlatformCode
	}
	return DMPPlatform_DMP_PLATFORM_UNKNOWN
}

func (x *BatchGetTagValueResp) GetTagResult() map[string]string {
	if x != nil {
		return x.TagResult
	}
	return nil
}

// Request parameters related to the dmp tag determination system
type BatchGetDMPTagResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqList []*GetDMPTagResultReq `protobuf:"bytes,1,rep,name=req_list,json=reqList,proto3" json:"req_list,omitempty"` // Request Body
}

func (x *BatchGetDMPTagResultReq) Reset() {
	*x = BatchGetDMPTagResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dmp_proxy_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetDMPTagResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetDMPTagResultReq) ProtoMessage() {}

func (x *BatchGetDMPTagResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_dmp_proxy_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetDMPTagResultReq.ProtoReflect.Descriptor instead.
func (*BatchGetDMPTagResultReq) Descriptor() ([]byte, []int) {
	return file_dmp_proxy_server_proto_rawDescGZIP(), []int{4}
}

func (x *BatchGetDMPTagResultReq) GetReqList() []*GetDMPTagResultReq {
	if x != nil {
		return x.ReqList
	}
	return nil
}

// Request dmp tag determination system results
type BatchGetDMPTagResultResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespList []*GetDMPTagResultResp `protobuf:"bytes,1,rep,name=resp_list,json=respList,proto3" json:"resp_list,omitempty"` // Response Body
}

func (x *BatchGetDMPTagResultResp) Reset() {
	*x = BatchGetDMPTagResultResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dmp_proxy_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetDMPTagResultResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetDMPTagResultResp) ProtoMessage() {}

func (x *BatchGetDMPTagResultResp) ProtoReflect() protoreflect.Message {
	mi := &file_dmp_proxy_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetDMPTagResultResp.ProtoReflect.Descriptor instead.
func (*BatchGetDMPTagResultResp) Descriptor() ([]byte, []int) {
	return file_dmp_proxy_server_proto_rawDescGZIP(), []int{5}
}

func (x *BatchGetDMPTagResultResp) GetRespList() []*GetDMPTagResultResp {
	if x != nil {
		return x.RespList
	}
	return nil
}

var File_dmp_proxy_server_proto protoreflect.FileDescriptor

var file_dmp_proxy_server_proto_rawDesc = []byte{
	0x0a, 0x16, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xff, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x44, 0x4d, 0x50, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x11, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74,
	0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x4d, 0x50, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x0f, 0x64, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd2, 0x03, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x44, 0x4d, 0x50, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x64, 0x6d, 0x70, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x4d, 0x50, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x0f, 0x64, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x62, 0x0a, 0x0a, 0x64, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x4d, 0x50, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x6d, 0x70, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x6d, 0x70, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x69, 0x0a, 0x0e, 0x44, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x80, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58,
	0x0a, 0x11, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x4d, 0x50, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0f, 0x64, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xa7, 0x03, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64,
	0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x58, 0x0a, 0x11, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x4d,
	0x50, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0f, 0x64, 0x6d, 0x70, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x74, 0x61,
	0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e,
	0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a,
	0x3c, 0x0a, 0x0e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a,
	0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x4d, 0x50, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x4d, 0x50, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x44, 0x4d, 0x50, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x4d, 0x50,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x2a, 0xb4, 0x01, 0x0a, 0x0b, 0x44, 0x4d, 0x50, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4d, 0x50, 0x5f, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4d, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x54, 0x41, 0x42, 0x10, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4d, 0x50, 0x5f, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x57, 0x45, 0x53, 0x45, 0x45, 0x10, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x44, 0x4d, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x10, 0x66, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4d, 0x50, 0x5f,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x41, 0x53, 0x10, 0x67, 0x12, 0x18,
	0x0a, 0x14, 0x44, 0x4d, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4b,
	0x55, 0x4e, 0x50, 0x45, 0x4e, 0x47, 0x10, 0x68, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4d, 0x50, 0x5f,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x69, 0x2a, 0xb1,
	0x01, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45,
	0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x10, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0xe8, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x45, 0x54, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0xe9, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xea, 0x07, 0x12, 0x21,
	0x0a, 0x1c, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xec,
	0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0xed, 0x07, 0x2a, 0x50, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x49, 0x54, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x10, 0x02, 0x32, 0x98, 0x03, 0x0a, 0x09, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x7c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x4d, 0x50, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x4d, 0x50, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x4d, 0x50, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x8b, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x4d, 0x50,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x44, 0x4d, 0x50, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x4d,
	0x50, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7f,
	0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x42,
	0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x62,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x5f, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dmp_proxy_server_proto_rawDescOnce sync.Once
	file_dmp_proxy_server_proto_rawDescData = file_dmp_proxy_server_proto_rawDesc
)

func file_dmp_proxy_server_proto_rawDescGZIP() []byte {
	file_dmp_proxy_server_proto_rawDescOnce.Do(func() {
		file_dmp_proxy_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_dmp_proxy_server_proto_rawDescData)
	})
	return file_dmp_proxy_server_proto_rawDescData
}

var file_dmp_proxy_server_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_dmp_proxy_server_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dmp_proxy_server_proto_goTypes = []interface{}{
	(DMPPlatform)(0),                 // 0: opensource.tab.dmp_proxy_server.DMPPlatform
	(RetCode)(0),                     // 1: opensource.tab.dmp_proxy_server.RetCode
	(StatusCode)(0),                  // 2: opensource.tab.dmp_proxy_server.StatusCode
	(*GetDMPTagResultReq)(nil),       // 3: opensource.tab.dmp_proxy_server.GetDMPTagResultReq
	(*GetDMPTagResultResp)(nil),      // 4: opensource.tab.dmp_proxy_server.GetDMPTagResultResp
	(*BatchGetTagValueReq)(nil),      // 5: opensource.tab.dmp_proxy_server.BatchGetTagValueReq
	(*BatchGetTagValueResp)(nil),     // 6: opensource.tab.dmp_proxy_server.BatchGetTagValueResp
	(*BatchGetDMPTagResultReq)(nil),  // 7: opensource.tab.dmp_proxy_server.BatchGetDMPTagResultReq
	(*BatchGetDMPTagResultResp)(nil), // 8: opensource.tab.dmp_proxy_server.BatchGetDMPTagResultResp
	nil,                              // 9: opensource.tab.dmp_proxy_server.GetDMPTagResultResp.DmpResultEntry
	nil,                              // 10: opensource.tab.dmp_proxy_server.BatchGetTagValueResp.TagResultEntry
}
var file_dmp_proxy_server_proto_depIdxs = []int32{
	0,  // 0: opensource.tab.dmp_proxy_server.GetDMPTagResultReq.dmp_platform_code:type_name -> opensource.tab.dmp_proxy_server.DMPPlatform
	1,  // 1: opensource.tab.dmp_proxy_server.GetDMPTagResultResp.retCode:type_name -> opensource.tab.dmp_proxy_server.RetCode
	0,  // 2: opensource.tab.dmp_proxy_server.GetDMPTagResultResp.dmp_platform_code:type_name -> opensource.tab.dmp_proxy_server.DMPPlatform
	9,  // 3: opensource.tab.dmp_proxy_server.GetDMPTagResultResp.dmp_result:type_name -> opensource.tab.dmp_proxy_server.GetDMPTagResultResp.DmpResultEntry
	0,  // 4: opensource.tab.dmp_proxy_server.BatchGetTagValueReq.dmp_platform_code:type_name -> opensource.tab.dmp_proxy_server.DMPPlatform
	1,  // 5: opensource.tab.dmp_proxy_server.BatchGetTagValueResp.retCode:type_name -> opensource.tab.dmp_proxy_server.RetCode
	0,  // 6: opensource.tab.dmp_proxy_server.BatchGetTagValueResp.dmp_platform_code:type_name -> opensource.tab.dmp_proxy_server.DMPPlatform
	10, // 7: opensource.tab.dmp_proxy_server.BatchGetTagValueResp.tag_result:type_name -> opensource.tab.dmp_proxy_server.BatchGetTagValueResp.TagResultEntry
	3,  // 8: opensource.tab.dmp_proxy_server.BatchGetDMPTagResultReq.req_list:type_name -> opensource.tab.dmp_proxy_server.GetDMPTagResultReq
	4,  // 9: opensource.tab.dmp_proxy_server.BatchGetDMPTagResultResp.resp_list:type_name -> opensource.tab.dmp_proxy_server.GetDMPTagResultResp
	2,  // 10: opensource.tab.dmp_proxy_server.GetDMPTagResultResp.DmpResultEntry.value:type_name -> opensource.tab.dmp_proxy_server.StatusCode
	3,  // 11: opensource.tab.dmp_proxy_server.APIServer.GetDMPTagResult:input_type -> opensource.tab.dmp_proxy_server.GetDMPTagResultReq
	7,  // 12: opensource.tab.dmp_proxy_server.APIServer.BatchGetDMPTagResult:input_type -> opensource.tab.dmp_proxy_server.BatchGetDMPTagResultReq
	5,  // 13: opensource.tab.dmp_proxy_server.APIServer.BatchGetTagValue:input_type -> opensource.tab.dmp_proxy_server.BatchGetTagValueReq
	4,  // 14: opensource.tab.dmp_proxy_server.APIServer.GetDMPTagResult:output_type -> opensource.tab.dmp_proxy_server.GetDMPTagResultResp
	8,  // 15: opensource.tab.dmp_proxy_server.APIServer.BatchGetDMPTagResult:output_type -> opensource.tab.dmp_proxy_server.BatchGetDMPTagResultResp
	6,  // 16: opensource.tab.dmp_proxy_server.APIServer.BatchGetTagValue:output_type -> opensource.tab.dmp_proxy_server.BatchGetTagValueResp
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_dmp_proxy_server_proto_init() }
func file_dmp_proxy_server_proto_init() {
	if File_dmp_proxy_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dmp_proxy_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDMPTagResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dmp_proxy_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDMPTagResultResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dmp_proxy_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTagValueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dmp_proxy_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTagValueResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dmp_proxy_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDMPTagResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dmp_proxy_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDMPTagResultResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dmp_proxy_server_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dmp_proxy_server_proto_goTypes,
		DependencyIndexes: file_dmp_proxy_server_proto_depIdxs,
		EnumInfos:         file_dmp_proxy_server_proto_enumTypes,
		MessageInfos:      file_dmp_proxy_server_proto_msgTypes,
	}.Build()
	File_dmp_proxy_server_proto = out.File
	file_dmp_proxy_server_proto_rawDesc = nil
	file_dmp_proxy_server_proto_goTypes = nil
	file_dmp_proxy_server_proto_depIdxs = nil
}
